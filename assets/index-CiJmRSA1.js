(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))u(r);new MutationObserver(r=>{for(const c of r)if(c.type==="childList")for(const g of c.addedNodes)g.tagName==="LINK"&&g.rel==="modulepreload"&&u(g)}).observe(document,{childList:!0,subtree:!0});function v(r){const c={};return r.integrity&&(c.integrity=r.integrity),r.referrerPolicy&&(c.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?c.credentials="include":r.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function u(r){if(r.ep)return;r.ep=!0;const c=v(r);fetch(r.href,c)}})();class Q{constructor(){this.models=this.getModels(),this.messages=this.getMessages(),this.currentModelIndex=this.getCurrentModelIndex()}getModels(){const n=localStorage.getItem("llm_models");return n?JSON.parse(n):[{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent",model:"",nickname:"flash-lite",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",model:"",nickname:"flash",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",model:"",nickname:"pro",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:32768}]}saveModels(n){this.models=n,localStorage.setItem("llm_models",JSON.stringify(n))}addModel(n){this.models.push(n),this.saveModels(this.models)}updateModel(n,v){this.models[n]=v,this.saveModels(this.models)}removeModel(n){this.models.splice(n,1),this.saveModels(this.models)}getCurrentModel(){return this.models[this.currentModelIndex]}cycleModel(){return this.currentModelIndex=(this.currentModelIndex+1)%this.models.length,this.saveCurrentModelIndex(),this.getCurrentModel()}getCurrentModelIndex(){const n=localStorage.getItem("current_model_index");return n?parseInt(n,10):0}saveCurrentModelIndex(){localStorage.setItem("current_model_index",this.currentModelIndex)}getMessages(){const n=localStorage.getItem("chat_messages");return n?JSON.parse(n):[]}saveMessages(){localStorage.setItem("chat_messages",JSON.stringify(this.messages))}addMessage(n){this.messages.push(n),this.saveMessages()}updateMessage(n,v){this.messages[n].content=v,this.saveMessages()}removeMessage(n){this.messages.splice(n,1),this.saveMessages()}clearMessages(){this.messages=[],this.saveMessages()}async sendMessage(n){const v=this.getCurrentModel(),{endpoint:u,apiKey:r,model:c,temperature:g,system_prompt:C,apiSchema:S,useGoogleSearch:Y,maxOutputTokens:G,prependSystemPrompt:_,thinkingBudget:q}=v;let I,H=u;if(S==="google"){const a=n.map(l=>({role:l.sender==="User"?"user":"model",parts:[{text:l.content}]}));if(_){const l=a[a.length-1];l.role==="user"&&(l.parts[0].text=`${C}

${l.parts[0].text}`)}I={contents:a,generationConfig:{temperature:g,topK:1,topP:1,maxOutputTokens:G||2048,stopSequences:[]},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_NONE"}]},_||(I.systemInstruction={role:"user",parts:[{text:C}]}),Y&&(I.tools=[{google_search:{}}]),q&&(I.generationConfig.thinkingConfig={thinkingBudget:q}),H=u}else{let a;if(_){a=n.map(i=>({role:i.sender.toLowerCase(),content:i.content}));const l=a[a.length-1];l.role==="user"&&(l.content=`${C}

${l.content}`)}else a=[{role:"system",content:C},...n.map(l=>({role:l.sender.toLowerCase(),content:l.content}))];I={model:c,messages:a,temperature:g}}try{const a=await fetch(H,{method:"POST",headers:{"Content-Type":"application/json",...S==="openai"&&{Authorization:`Bearer ${r}`},...S==="google"&&{"x-goog-api-key":r}},body:JSON.stringify(I)});if(!a.ok){const d=await a.json().catch(()=>({}));throw new Error(`API Error: ${a.status} ${a.statusText} - ${d.error?.message||"Unknown error"}`)}const l=await a.json();let i;if(S==="google"){const d=l.candidates[0].content;d&&d.parts?i={content:d.parts.map(M=>M.text).join("")}:i={content:"[The model sent an empty response.]"}}else i=l.choices[0]?.message;if(i?.content){const d={sender:"Assistant",content:i.content};return this.addMessage(d),d}else if(i?.tool_calls){const d=i.tool_calls[0],w=d.function.name,M=d.function.arguments,x={sender:"Assistant",content:`The model wants to call the '${w}' tool with the following arguments: ${M}. However, tool execution is not yet implemented.`};return this.addMessage(x),x}else throw new Error("API Error: Invalid response format.")}catch(a){console.error("API call failed:",a);const l={sender:"Error",content:`An error occurred: ${a.message}`};return this.addMessage(l),l}}}window.chatAPI=new Q;document.addEventListener("DOMContentLoaded",()=>{const K=document.getElementById("cycle-model-btn"),n=document.getElementById("model-nickname"),v=document.getElementById("settings-btn"),u=document.getElementById("chat-container"),r=document.getElementById("resize-handle"),c=document.getElementById("message-input"),g=document.getElementById("send-btn"),C=document.getElementById("settings-modal"),S=document.getElementById("llm-configs-container"),Y=document.getElementById("add-model-btn"),G=document.getElementById("save-settings-btn"),_=document.getElementById("close-settings-btn"),q=document.getElementById("clear-chat-btn"),I=document.getElementById("import-settings-btn"),H=document.getElementById("export-settings-btn");document.getElementById("copy-chat-btn");const a=document.getElementById("toggle-dark-mode-btn"),l=document.querySelector("footer"),i=document.documentElement;localStorage.getItem("darkMode")==="true"?(i.classList.add("dark"),a.textContent="☀️"):(i.classList.remove("dark"),a.textContent="🌓");let d=null;document.addEventListener("click",e=>{if(!document.querySelector(".message-controls"))return;const t=e.target.closest("[data-index]"),o=e.target.closest(".message-controls");!t&&!o&&x()});const w=()=>{u.innerHTML="",window.chatAPI.getMessages().forEach((e,s)=>{const t=M(e,s);u.appendChild(t)})},M=(e,s)=>{const t=document.createElement("div");let o="bg-gray-300 dark:bg-gray-700",m="self-start";e.sender==="User"?(o="bg-blue-500 text-white",m="self-end"):e.sender==="Error"&&(o="bg-red-500 text-white"),t.className=`p-3 rounded-lg ${o} w-full ${m} message`;const f=document.createElement("div");return f.className="message-content",f.innerHTML=marked.parse(e.content,{breaks:!0}),t.appendChild(f),t.dataset.index=s,t.querySelectorAll("pre").forEach(p=>{const T=p.querySelector("code"),O=T.className.split("-")[1]||"",A=document.createElement("div");A.className="code-block-container";const B=document.createElement("div");B.className="code-block-header";const P=document.createElement("span");P.textContent=O,B.appendChild(P);const b=document.createElement("button");b.textContent="Copy",b.className="copy-code-btn",B.appendChild(b),A.appendChild(B),A.appendChild(p.cloneNode(!0)),p.replaceWith(A),hljs.highlightElement(A.querySelector("pre code")),b.addEventListener("click",h=>{h.stopPropagation();const L=T.innerText;navigator.clipboard.writeText(L).then(()=>{b.textContent="Copied!",setTimeout(()=>{b.textContent="Copy"},2e3)},()=>{alert("Failed to copy code.")})})}),e.sender!=="Error"&&t.addEventListener("click",p=>{d&&x(),d=t,z(t,p.clientX,p.clientY)}),t},z=(e,s,t)=>{const o=document.createElement("div");o.className="message-controls absolute bg-white dark:bg-gray-800 rounded-lg shadow-lg p-2 flex space-x-2";const m=document.createElement("button");m.textContent="✏️",m.addEventListener("click",()=>{const h=e.dataset.index,L=e.querySelector(".message-content"),j=window.chatAPI.getMessages()[h].content,y=document.createElement("div");y.className="w-full";const E=document.createElement("textarea");E.className="w-full p-2 border rounded-lg dark:bg-gray-700 dark:border-gray-600 resize-y text-black dark:text-white",E.value=j;const $=document.createElement("button");$.textContent="Save",$.className="bg-blue-500 text-white px-4 py-2 rounded-lg mt-2";const N=document.createElement("button");N.textContent="Cancel",N.className="bg-gray-500 text-white px-4 py-2 rounded-lg mt-2 ml-2",y.appendChild(E),y.appendChild($),y.appendChild(N),L.innerHTML="",L.appendChild(y),E.focus(),E.addEventListener("keydown",k=>{k.ctrlKey&&k.key==="Enter"&&(k.preventDefault(),$.click())}),$.addEventListener("click",()=>{const k=E.value;if(k){window.chatAPI.updateMessage(h,k);const V=M(window.chatAPI.getMessages()[h],h);e.replaceWith(V)}}),N.addEventListener("click",()=>{const k=M(window.chatAPI.getMessages()[h],h);e.replaceWith(k)}),x()});const f=document.createElement("button");f.textContent="🗑️",f.addEventListener("click",()=>{confirm("Are you sure you want to delete this message?")&&(window.chatAPI.removeMessage(e.dataset.index),w()),x()});const p=document.createElement("button");p.textContent="📋",p.addEventListener("click",()=>{navigator.clipboard.writeText(e.textContent).then(()=>{alert("Message copied to clipboard!")},()=>{alert("Failed to copy message.")}),x()});const T=document.createElement("button");T.textContent="🔄️",T.addEventListener("click",async()=>{const h=parseInt(e.dataset.index),L=window.chatAPI.getMessages(),j=L[h];let y;j.sender==="User"?y=L.slice(0,h+1):y=L.slice(0,h),window.chatAPI.messages=y,window.chatAPI.saveMessages(),w();const E=y[y.length-1];if(E&&E.sender==="User"){x(),g.disabled=!0;const N=M({sender:"Assistant",content:"..."},-1);u.appendChild(N),u.scrollTop=u.scrollHeight;const k=await window.chatAPI.sendMessage(y);u.removeChild(N),k&&w(),g.disabled=!1,c.focus()}}),o.appendChild(m),o.appendChild(f),o.appendChild(p),o.appendChild(T),o.style.visibility="hidden",document.body.appendChild(o);const O=o.getBoundingClientRect(),A=window.innerWidth,B=window.innerHeight;let P=s,b=t;s+O.width>A&&(P=A-O.width-5),t+O.height>B&&(b=B-O.height-5),P<0&&(P=5),b<0&&(b=5),o.style.left=`${P}px`,o.style.top=`${b}px`,o.style.visibility="visible"},x=()=>{const e=document.querySelector(".message-controls");e&&e.remove(),d&&(d=null)},R=()=>{S.innerHTML="",window.chatAPI.getModels().forEach((e,s)=>{const t=document.createElement("div");t.className="mb-4 p-4 border rounded-lg dark:border-gray-600",t.innerHTML=`
                <div class="flex justify-between items-center mb-2">
                    <h3 class="text-lg font-semibold">${e.nickname}</h3>
                    <button type="button" class="remove-model-btn text-xl" data-index="${s}">➖</button>
                </div>
                <input type="text" value="${e.endpoint}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Endpoint URL">
                <div class="model-name-container" style="display: ${e.apiSchema==="google"?"none":"block"}">
                    <input type="text" value="${e.model}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Model Name">
                </div>
                <input type="text" value="${e.nickname}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Nickname">
                <input type="password" value="${e.apiKey||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="API Key">
                <input type="number" step="0.1" value="${e.temperature}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Temperature">
                <input type="number" value="${e.maxOutputTokens||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Max Output Tokens">
                <textarea class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="System Prompt">${e.system_prompt}</textarea>
                <select class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600 api-schema" placeholder="API Schema">
                    <option value="openai" ${e.apiSchema==="openai"?"selected":""}>OpenAI</option>
                    <option value="google" ${e.apiSchema==="google"?"selected":""}>Google</option>
                </select>
                <div class="google-search-container" style="display: ${e.apiSchema==="google"?"block":"none"}">
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="google-search-checkbox-${s}" class="mr-2" ${e.useGoogleSearch?"checked":""}>
                        <label for="google-search-checkbox-${s}">Enable Google Search</label>
                    </div>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="prepend-system-prompt-checkbox-${s}" class="mr-2" ${e.prependSystemPrompt?"checked":""}>
                        <label for="prepend-system-prompt-checkbox-${s}">Prepend System Prompt</label>
                    </div>
                    <input type="number" value="${e.thinkingBudget??""}" class="w-full p-2 mt-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Thinking Budget (tokens)">
                </div>
            `,S.appendChild(t)}),document.querySelectorAll(".remove-model-btn").forEach(e=>{e.addEventListener("click",s=>{const t=s.target.dataset.index;window.chatAPI.removeModel(t),R()})}),document.querySelectorAll(".api-schema").forEach(e=>{e.addEventListener("change",s=>{const t=s.target.closest(".mb-4"),o=t.querySelector(".google-search-container"),m=t.querySelector(".model-name-container");s.target.value==="google"?(o.style.display="block",m.style.display="none"):(o.style.display="none",m.style.display="block")})})};K.addEventListener("click",()=>{const e=window.chatAPI.cycleModel();n.textContent=e.nickname}),a.addEventListener("click",()=>{i.classList.toggle("dark"),i.classList.contains("dark")?(localStorage.setItem("darkMode","true"),a.textContent="☀️"):(localStorage.setItem("darkMode","false"),a.textContent="🌓")}),v.addEventListener("click",()=>{R(),C.classList.remove("hidden")}),_.addEventListener("click",()=>{C.classList.add("hidden")}),Y.addEventListener("click",()=>{window.chatAPI.addModel({endpoint:"",apiKey:"",model:"",nickname:"New Model",temperature:.7,system_prompt:"You are a helpful assistant.",apiSchema:"openai",maxOutputTokens:2048}),R()}),G.addEventListener("click",e=>{e.preventDefault();const s=Array.from(S.children).map(t=>({endpoint:t.querySelector('input[placeholder="Endpoint URL"]').value,model:t.querySelector(".api-schema").value==="google"?"":t.querySelector('input[placeholder="Model Name"]').value,nickname:t.querySelector('input[placeholder="Nickname"]').value,apiKey:t.querySelector('input[placeholder="API Key"]').value,temperature:parseFloat(t.querySelector('input[placeholder="Temperature"]').value),maxOutputTokens:parseInt(t.querySelector('input[placeholder="Max Output Tokens"]').value,10),system_prompt:t.querySelector("textarea").value,apiSchema:t.querySelector(".api-schema").value,useGoogleSearch:t.querySelector(".api-schema").value==="google"?t.querySelector('input[id^="google-search-checkbox-"]').checked:!1,prependSystemPrompt:t.querySelector(".api-schema").value==="google"?t.querySelector('input[id^="prepend-system-prompt-checkbox-"]').checked:!1,thinkingBudget:t.querySelector(".api-schema").value==="google"?parseInt(t.querySelector('input[placeholder="Thinking Budget (tokens)"]').value,10):null}));window.chatAPI.saveModels(s),C.classList.add("hidden"),n.textContent=window.chatAPI.getCurrentModel().nickname}),g.addEventListener("click",async()=>{const e=c.value.trim();if(e){c.value="",g.disabled=!0;const s={sender:"User",content:e};window.chatAPI.addMessage(s),w();const o=M({sender:"Assistant",content:"..."},-1);u.appendChild(o),o.scrollIntoView({behavior:"smooth"});const m=await window.chatAPI.sendMessage(window.chatAPI.getMessages());u.removeChild(o),m&&w(),g.disabled=!1}}),c.addEventListener("keydown",e=>{e.ctrlKey&&e.key==="Enter"&&(e.preventDefault(),g.click())});let U=!1;const J=e=>{U=!0,document.body.style.userSelect="none",document.body.style.cursor="row-resize"},F=e=>{if(U){const s=e.clientY||e.touches&&e.touches[0].clientY;if(s===void 0)return;const t=window.innerHeight-s;t>=140&&t<=500&&(l.style.height=`${t}px`)}},W=()=>{U=!1,document.body.style.userSelect="",document.body.style.cursor=""};r.addEventListener("mousedown",J),document.addEventListener("mousemove",F),document.addEventListener("mouseup",W),r.addEventListener("touchstart",J,{passive:!0}),document.addEventListener("touchmove",F),document.addEventListener("touchend",W),q.addEventListener("click",()=>{confirm("Are you sure you want to clear the chat?")&&(window.chatAPI.clearMessages(),w())}),H.addEventListener("click",()=>{const e=window.chatAPI.getModels(),s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,2)),t=document.createElement("a");t.setAttribute("href",s),t.setAttribute("download","gemini-chat-settings.json"),document.body.appendChild(t),t.click(),t.remove()}),I.addEventListener("click",()=>{const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=s=>{const t=s.target.files[0],o=new FileReader;o.onload=m=>{try{const f=m.target.result,p=JSON.parse(f);window.chatAPI.saveModels(p),R(),n.textContent=window.chatAPI.getCurrentModel().nickname,alert("Settings imported successfully!")}catch(f){alert("Error importing settings: "+f.message)}},o.readAsText(t)},e.click()});const X=window.chatAPI.getCurrentModel();X?n.textContent=X.nickname:(n.textContent="No Model",g.disabled=!0),w()});
