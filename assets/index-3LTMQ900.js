(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const c of r)if(c.type==="childList")for(const p of c.addedNodes)p.tagName==="LINK"&&p.rel==="modulepreload"&&i(p)}).observe(document,{childList:!0,subtree:!0});function b(r){const c={};return r.integrity&&(c.integrity=r.integrity),r.referrerPolicy&&(c.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?c.credentials="include":r.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function i(r){if(r.ep)return;r.ep=!0;const c=b(r);fetch(r.href,c)}})();class F{constructor(){this.models=this.getModels(),this.messages=this.getMessages(),this.currentModelIndex=this.getCurrentModelIndex()}getModels(){const n=localStorage.getItem("llm_models");return n?JSON.parse(n):[{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent",model:"",nickname:"flash-lite",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",model:"",nickname:"flash",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",model:"",nickname:"pro",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:32768}]}saveModels(n){this.models=n,localStorage.setItem("llm_models",JSON.stringify(n))}addModel(n){this.models.push(n),this.saveModels(this.models)}updateModel(n,b){this.models[n]=b,this.saveModels(this.models)}removeModel(n){this.models.splice(n,1),this.saveModels(this.models)}getCurrentModel(){return this.models[this.currentModelIndex]}cycleModel(){return this.currentModelIndex=(this.currentModelIndex+1)%this.models.length,this.saveCurrentModelIndex(),this.getCurrentModel()}getCurrentModelIndex(){const n=localStorage.getItem("current_model_index");return n?parseInt(n,10):0}saveCurrentModelIndex(){localStorage.setItem("current_model_index",this.currentModelIndex)}getMessages(){const n=localStorage.getItem("chat_messages");return n?JSON.parse(n):[]}saveMessages(){localStorage.setItem("chat_messages",JSON.stringify(this.messages))}addMessage(n){this.messages.push(n),this.saveMessages()}updateMessage(n,b){this.messages[n].content=b,this.saveMessages()}removeMessage(n){this.messages.splice(n,1),this.saveMessages()}clearMessages(){this.messages=[],this.saveMessages()}async sendMessage(n){const b=this.getCurrentModel(),{endpoint:i,apiKey:r,model:c,temperature:p,system_prompt:w,apiSchema:v,useGoogleSearch:_,maxOutputTokens:q,prependSystemPrompt:A,thinkingBudget:N}=b;let M,O=i;if(v==="google"){const l=n.map(a=>({role:a.sender==="User"?"user":"model",parts:[{text:a.content}]}));if(A){const a=l[l.length-1];a.role==="user"&&(a.parts[0].text=`${w}

${a.parts[0].text}`)}M={contents:l,generationConfig:{temperature:p,topK:1,topP:1,maxOutputTokens:q||2048,stopSequences:[]},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_NONE"}]},A||(M.systemInstruction={role:"user",parts:[{text:w}]}),_&&(M.tools=[{google_search:{}}]),N&&(M.generationConfig.thinkingConfig={thinkingBudget:N}),O=i}else{let l;if(A){l=n.map(d=>({role:d.sender.toLowerCase(),content:d.content}));const a=l[l.length-1];a.role==="user"&&(a.content=`${w}

${a.content}`)}else l=[{role:"system",content:w},...n.map(a=>({role:a.sender.toLowerCase(),content:a.content}))];M={model:c,messages:l,temperature:p}}try{const l=await fetch(O,{method:"POST",headers:{"Content-Type":"application/json",...v==="openai"&&{Authorization:`Bearer ${r}`},...v==="google"&&{"x-goog-api-key":r}},body:JSON.stringify(M)});if(!l.ok){const m=await l.json().catch(()=>({}));throw new Error(`API Error: ${l.status} ${l.statusText} - ${m.error?.message||"Unknown error"}`)}const a=await l.json();let d;if(v==="google"?d={content:a.candidates[0].content.parts.map(y=>y.text).join("")}:d=a.choices[0]?.message,d?.content){const m={sender:"Assistant",content:d.content};return this.addMessage(m),m}else if(d?.tool_calls){const m=d.tool_calls[0],T=m.function.name,y=m.function.arguments,C={sender:"Assistant",content:`The model wants to call the '${T}' tool with the following arguments: ${y}. However, tool execution is not yet implemented.`};return this.addMessage(C),C}else throw new Error("API Error: Invalid response format.")}catch(l){console.error("API call failed:",l);const a={sender:"Error",content:`An error occurred: ${l.message}`};return this.addMessage(a),a}}}window.chatAPI=new F;document.addEventListener("DOMContentLoaded",()=>{const $=document.getElementById("cycle-model-btn"),n=document.getElementById("model-nickname"),b=document.getElementById("settings-btn"),i=document.getElementById("chat-container"),r=document.getElementById("resize-handle"),c=document.getElementById("message-input"),p=document.getElementById("send-btn"),w=document.getElementById("settings-modal"),v=document.getElementById("llm-configs-container"),_=document.getElementById("add-model-btn"),q=document.getElementById("save-settings-btn"),A=document.getElementById("close-settings-btn"),N=document.getElementById("clear-chat-btn"),M=document.getElementById("import-settings-btn"),O=document.getElementById("export-settings-btn");document.getElementById("copy-chat-btn");const l=document.querySelector("footer");let a=null;document.addEventListener("click",e=>{if(!document.querySelector(".message-controls"))return;const t=e.target.closest("[data-index]"),s=e.target.closest(".message-controls");!t&&!s&&y()});const d=()=>{i.innerHTML="";let e=null;window.chatAPI.getMessages().forEach((o,t)=>{const s=m(o,t);i.appendChild(s),e=s}),e&&e.scrollIntoView({behavior:"smooth"})},m=(e,o)=>{const t=document.createElement("div");let s="bg-gray-300 dark:bg-gray-700",u="self-start";return e.sender==="User"?(s="bg-blue-500 text-white",u="self-end"):e.sender==="Error"&&(s="bg-red-500 text-white"),t.className=`p-3 rounded-lg ${s} w-full ${u} message`,t.innerHTML=marked.parse(e.content,{breaks:!0}),t.dataset.index=o,t.querySelectorAll("pre").forEach(g=>{const k=g.querySelector("code"),P=k.className.split("-")[1]||"",f=document.createElement("div");f.className="code-block-container";const x=document.createElement("div");x.className="code-block-header";const B=document.createElement("span");B.textContent=P,x.appendChild(B);const h=document.createElement("button");h.textContent="Copy",h.className="copy-code-btn",x.appendChild(h),f.appendChild(x),f.appendChild(g.cloneNode(!0)),g.replaceWith(f),hljs.highlightElement(f.querySelector("pre code")),h.addEventListener("click",S=>{S.stopPropagation();const E=k.innerText;navigator.clipboard.writeText(E).then(()=>{h.textContent="Copied!",setTimeout(()=>{h.textContent="Copy"},2e3)},()=>{alert("Failed to copy code.")})})}),e.sender!=="Error"&&t.addEventListener("click",g=>{a&&y(),a=t,T(t,g.clientX,g.clientY)}),t},T=(e,o,t)=>{const s=document.createElement("div");s.className="message-controls absolute bg-white dark:bg-gray-800 rounded-lg shadow-lg p-2 flex space-x-2";const u=document.createElement("button");u.textContent="✏️",u.addEventListener("click",()=>{const E=prompt("Edit message:",window.chatAPI.getMessages()[e.dataset.index].content);E&&(window.chatAPI.updateMessage(e.dataset.index,E),d()),y()});const g=document.createElement("button");g.textContent="🗑️",g.addEventListener("click",()=>{confirm("Are you sure you want to delete this message?")&&(window.chatAPI.removeMessage(e.dataset.index),d()),y()});const k=document.createElement("button");k.textContent="📋",k.addEventListener("click",()=>{navigator.clipboard.writeText(e.textContent).then(()=>{alert("Message copied to clipboard!")},()=>{alert("Failed to copy message.")}),y()});const P=document.createElement("button");P.textContent="🔄️",P.addEventListener("click",async()=>{const E=parseInt(e.dataset.index),H=window.chatAPI.getMessages(),z=H[E];let I;z.sender==="User"?I=H.slice(0,E+1):I=H.slice(0,E),window.chatAPI.messages=I,window.chatAPI.saveMessages(),d();const U=I[I.length-1];if(U&&U.sender==="User"){y(),p.disabled=!0;const j=m({sender:"Assistant",content:"..."},-1);i.appendChild(j),i.scrollTop=i.scrollHeight;const J=await window.chatAPI.sendMessage(I);i.removeChild(j),J&&d(),p.disabled=!1,c.focus()}}),s.appendChild(u),s.appendChild(g),s.appendChild(k),s.appendChild(P),s.style.visibility="hidden",document.body.appendChild(s);const f=s.getBoundingClientRect(),x=window.innerWidth,B=window.innerHeight;let h=o,S=t;o+f.width>x&&(h=x-f.width-5),t+f.height>B&&(S=B-f.height-5),h<0&&(h=5),S<0&&(S=5),s.style.left=`${h}px`,s.style.top=`${S}px`,s.style.visibility="visible"},y=()=>{const e=document.querySelector(".message-controls");e&&e.remove(),a&&(a=null)},L=()=>{v.innerHTML="",window.chatAPI.getModels().forEach((e,o)=>{const t=document.createElement("div");t.className="mb-4 p-4 border rounded-lg dark:border-gray-600",t.innerHTML=`
                <div class="flex justify-between items-center mb-2">
                    <h3 class="text-lg font-semibold">${e.nickname}</h3>
                    <button type="button" class="remove-model-btn text-xl" data-index="${o}">➖</button>
                </div>
                <input type="text" value="${e.endpoint}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Endpoint URL">
                <div class="model-name-container" style="display: ${e.apiSchema==="google"?"none":"block"}">
                    <input type="text" value="${e.model}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Model Name">
                </div>
                <input type="text" value="${e.nickname}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Nickname">
                <input type="password" value="${e.apiKey||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="API Key">
                <input type="number" step="0.1" value="${e.temperature}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Temperature">
                <input type="number" value="${e.maxOutputTokens||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Max Output Tokens">
                <textarea class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="System Prompt">${e.system_prompt}</textarea>
                <select class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600 api-schema" placeholder="API Schema">
                    <option value="openai" ${e.apiSchema==="openai"?"selected":""}>OpenAI</option>
                    <option value="google" ${e.apiSchema==="google"?"selected":""}>Google</option>
                </select>
                <div class="google-search-container" style="display: ${e.apiSchema==="google"?"block":"none"}">
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="google-search-checkbox-${o}" class="mr-2" ${e.useGoogleSearch?"checked":""}>
                        <label for="google-search-checkbox-${o}">Enable Google Search</label>
                    </div>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="prepend-system-prompt-checkbox-${o}" class="mr-2" ${e.prependSystemPrompt?"checked":""}>
                        <label for="prepend-system-prompt-checkbox-${o}">Prepend System Prompt</label>
                    </div>
                    <input type="number" value="${e.thinkingBudget??""}" class="w-full p-2 mt-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Thinking Budget (tokens)">
                </div>
            `,v.appendChild(t)}),document.querySelectorAll(".remove-model-btn").forEach(e=>{e.addEventListener("click",o=>{const t=o.target.dataset.index;window.chatAPI.removeModel(t),L()})}),document.querySelectorAll(".api-schema").forEach(e=>{e.addEventListener("change",o=>{const t=o.target.closest(".mb-4"),s=t.querySelector(".google-search-container"),u=t.querySelector(".model-name-container");o.target.value==="google"?(s.style.display="block",u.style.display="none"):(s.style.display="none",u.style.display="block")})})};$.addEventListener("click",()=>{const e=window.chatAPI.cycleModel();n.textContent=e.nickname}),b.addEventListener("click",()=>{L(),w.classList.remove("hidden")}),A.addEventListener("click",()=>{w.classList.add("hidden")}),_.addEventListener("click",()=>{window.chatAPI.addModel({endpoint:"",apiKey:"",model:"",nickname:"New Model",temperature:.7,system_prompt:"You are a helpful assistant.",apiSchema:"openai",maxOutputTokens:2048}),L()}),q.addEventListener("click",e=>{e.preventDefault();const o=Array.from(v.children).map(t=>({endpoint:t.querySelector('input[placeholder="Endpoint URL"]').value,model:t.querySelector(".api-schema").value==="google"?"":t.querySelector('input[placeholder="Model Name"]').value,nickname:t.querySelector('input[placeholder="Nickname"]').value,apiKey:t.querySelector('input[placeholder="API Key"]').value,temperature:parseFloat(t.querySelector('input[placeholder="Temperature"]').value),maxOutputTokens:parseInt(t.querySelector('input[placeholder="Max Output Tokens"]').value,10),system_prompt:t.querySelector("textarea").value,apiSchema:t.querySelector(".api-schema").value,useGoogleSearch:t.querySelector(".api-schema").value==="google"?t.querySelector('input[id^="google-search-checkbox-"]').checked:!1,prependSystemPrompt:t.querySelector(".api-schema").value==="google"?t.querySelector('input[id^="prepend-system-prompt-checkbox-"]').checked:!1,thinkingBudget:t.querySelector(".api-schema").value==="google"?parseInt(t.querySelector('input[placeholder="Thinking Budget (tokens)"]').value,10):null}));window.chatAPI.saveModels(o),w.classList.add("hidden"),n.textContent=window.chatAPI.getCurrentModel().nickname}),p.addEventListener("click",async()=>{const e=c.value.trim();if(e){c.value="",p.disabled=!0;const o={sender:"User",content:e};window.chatAPI.addMessage(o),d();const s=m({sender:"Assistant",content:"..."},-1);i.appendChild(s),s.scrollIntoView({behavior:"smooth"});const u=await window.chatAPI.sendMessage(window.chatAPI.getMessages());i.removeChild(s),u&&d(),p.disabled=!1,c.focus()}});let C=!1;const R=e=>{C=!0,document.body.style.userSelect="none",document.body.style.cursor="row-resize"},K=e=>{if(C){const o=e.clientY||e.touches&&e.touches[0].clientY;if(o===void 0)return;const t=window.innerHeight-o;t>=120&&t<=500&&(l.style.height=`${t}px`)}},Y=()=>{C=!1,document.body.style.userSelect="",document.body.style.cursor=""};r.addEventListener("mousedown",R),document.addEventListener("mousemove",K),document.addEventListener("mouseup",Y),r.addEventListener("touchstart",R,{passive:!0}),document.addEventListener("touchmove",K),document.addEventListener("touchend",Y),N.addEventListener("click",()=>{confirm("Are you sure you want to clear the chat?")&&(window.chatAPI.clearMessages(),d())}),O.addEventListener("click",()=>{const e=window.chatAPI.getModels(),o="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,2)),t=document.createElement("a");t.setAttribute("href",o),t.setAttribute("download","gemini-chat-settings.json"),document.body.appendChild(t),t.click(),t.remove()}),M.addEventListener("click",()=>{const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=o=>{const t=o.target.files[0],s=new FileReader;s.onload=u=>{try{const g=u.target.result,k=JSON.parse(g);window.chatAPI.saveModels(k),L(),n.textContent=window.chatAPI.getCurrentModel().nickname,alert("Settings imported successfully!")}catch(g){alert("Error importing settings: "+g.message)}},s.readAsText(t)},e.click()});const G=window.chatAPI.getCurrentModel();G?n.textContent=G.nickname:(n.textContent="No Model",p.disabled=!0),d()});
