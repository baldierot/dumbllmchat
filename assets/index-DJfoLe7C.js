(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const c of document.querySelectorAll('link[rel="modulepreload"]'))a(c);new MutationObserver(c=>{for(const r of c)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function s(c){const r={};return c.integrity&&(r.integrity=c.integrity),c.referrerPolicy&&(r.referrerPolicy=c.referrerPolicy),c.crossOrigin==="use-credentials"?r.credentials="include":c.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(c){if(c.ep)return;c.ep=!0;const r=s(c);fetch(c.href,r)}})();const se="dumbllmchat_db",oe=1,S="messages";let G;function H(){return new Promise((y,e)=>{if(G)return y(G);const s=indexedDB.open(se,oe);s.onerror=a=>{e("Error opening IndexedDB")},s.onsuccess=a=>{G=a.target.result,y(G)},s.onupgradeneeded=a=>{a.target.result.createObjectStore(S,{keyPath:"id",autoIncrement:!0})}})}async function ae(){const y=await H();return new Promise((e,s)=>{const r=y.transaction([S],"readonly").objectStore(S).getAll();r.onerror=o=>{s("Error getting messages from IndexedDB")},r.onsuccess=o=>{e(o.target.result)}})}async function re(y){const e=await H();return new Promise((s,a)=>{const o=e.transaction([S],"readwrite").objectStore(S).add(y);o.onerror=i=>{a("Error adding message to IndexedDB")},o.onsuccess=i=>{s(i.target.result)}})}async function ce(y){const e=await H();return new Promise((s,a)=>{const o=e.transaction([S],"readwrite").objectStore(S).put(y);o.onerror=i=>{a("Error updating message in IndexedDB")},o.onsuccess=i=>{s(i.target.result)}})}async function de(y){const e=await H();return new Promise((s,a)=>{const o=e.transaction([S],"readwrite").objectStore(S).delete(y);o.onerror=i=>{a("Error removing message from IndexedDB")},o.onsuccess=i=>{s()}})}async function le(){const y=await H();return new Promise((e,s)=>{const r=y.transaction([S],"readwrite").objectStore(S).clear();r.onerror=o=>{s("Error clearing messages from IndexedDB")},r.onsuccess=o=>{e()}})}window.db={getMessages:ae,addMessage:re,updateMessage:ce,removeMessage:de,clearMessages:le};class ie{constructor(){this.models=this.getModels(),this.messages=[],this.currentModelIndex=this.getCurrentModelIndex(),this.init()}async init(){this.messages=await window.db.getMessages()}getModels(){const e=localStorage.getItem("llm_models");return e?JSON.parse(e):[{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent",model:"",nickname:"flash-lite",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",model:"",nickname:"flash",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",model:"",nickname:"pro",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:32768}]}saveModels(e){this.models=e,localStorage.setItem("llm_models",JSON.stringify(e))}addModel(e){this.models.push(e),this.saveModels(this.models)}updateModel(e,s){this.models[e]=s,this.saveModels(this.models)}removeModel(e){this.models.splice(e,1),this.saveModels(this.models)}getCurrentModel(){return this.models[this.currentModelIndex]}cycleModel(){return this.currentModelIndex=(this.currentModelIndex+1)%this.models.length,this.saveCurrentModelIndex(),this.getCurrentModel()}getCurrentModelIndex(){const e=localStorage.getItem("current_model_index");return e?parseInt(e,10):0}saveCurrentModelIndex(){localStorage.setItem("current_model_index",this.currentModelIndex)}async getMessages(){return this.messages=await window.db.getMessages(),this.messages}async getMessage(e){return this.messages=await window.db.getMessages(),this.messages.find(s=>s.id===e)}async addMessage(e){const s=await window.db.addMessage(e),a={...e,id:s};return this.messages.push(a),a}async updateMessage(e,s,a){const c=await this.getMessage(e);return c.content=s,a&&(c.files=a),await window.db.updateMessage(c),c}async removeMessage(e){await window.db.removeMessage(e),this.messages=this.messages.filter(s=>s.id!==e)}async clearMessages(){await window.db.clearMessages(),this.messages=[]}async sendMessage(e){const s=this.getCurrentModel(),{endpoint:a,apiKey:c,model:r,temperature:o,system_prompt:i,apiSchema:f,useGoogleSearch:w,maxOutputTokens:b,prependSystemPrompt:E,thinkingBudget:x}=s;let I,N=a;if(f==="google"){const u=e.map(m=>{const p=[{text:m.content}];return m.files&&m.files.forEach(h=>{p.push({inline_data:{mime_type:h.type,data:h.data.split(",")[1]}})}),{role:m.sender==="User"?"user":"model",parts:p}});if(E){const m=u[u.length-1];m.role==="user"&&(m.parts[0].text=`${i}

${m.parts[0].text}`)}I={contents:u,generationConfig:{temperature:o,topK:1,topP:1,maxOutputTokens:b||2048,stopSequences:[]},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_NONE"}]},E||(I.systemInstruction={role:"user",parts:[{text:i}]}),w&&(I.tools=[{google_search:{}}]),x&&(I.generationConfig.thinkingConfig={thinkingBudget:x}),N=a}else{let u;if(E){u=e.map(p=>({role:p.sender.toLowerCase(),content:p.content}));const m=u[u.length-1];m.role==="user"&&(m.content=`${i}

${m.content}`)}else u=[{role:"system",content:i},...e.map(m=>{const p=[{type:"text",text:m.content}];return m.files&&m.files.forEach(h=>{p.push({type:"image_url",image_url:{url:h.data}})}),{role:m.sender.toLowerCase(),content:p}})];I={model:r,messages:u,temperature:o}}try{const u=await fetch(N,{method:"POST",headers:{"Content-Type":"application/json",...f==="openai"&&{Authorization:`Bearer ${c}`},...f==="google"&&{"x-goog-api-key":c}},body:JSON.stringify(I)});if(!u.ok){const h=await u.json().catch(()=>({}));throw new Error(`API Error: ${u.status} ${u.statusText} - ${h.error?.message||"Unknown error"}`)}const m=await u.json();let p;if(f==="google"){const h=m.candidates[0].content;h&&h.parts?p={content:h.parts.map(A=>A.text).join("")}:p={content:"[The model sent an empty response.]"}}else p=m.choices[0]?.message;if(p?.content){const h={sender:"Assistant",content:p.content};return await this.addMessage(h)}else if(p?.tool_calls){const h=p.tool_calls[0],M=h.function.name,A=h.function.arguments,U={sender:"Assistant",content:`The model wants to call the '${M}' tool with the following arguments: ${A}. However, tool execution is not yet implemented.`};return await this.addMessage(U)}else throw new Error("API Error: Invalid response format.")}catch(u){console.error("API call failed:",u);const m={sender:"Error",content:`An error occurred: ${u.message}`};return await this.addMessage(m)}}}window.chatAPI=new ie;class ue{constructor(e){this.chatContainer=e}appendMessage(e){const s=this.chatContainer.scrollHeight-this.chatContainer.clientHeight<=this.chatContainer.scrollTop+1,a=this.createMessageElement(e);this.chatContainer.appendChild(a),s&&a.scrollIntoView({behavior:"smooth"})}renderMessages(e){this.clear(),e.forEach(s=>{const a=this.createMessageElement(s);this.chatContainer.appendChild(a)})}removeMessage(e){const s=this.chatContainer.querySelector(`[data-id='${e}']`);s&&s.remove()}editMessage(e){const s=this.chatContainer.querySelector(`[data-id='${e.id}']`);if(s){const a=this.createMessageElement(e);s.replaceWith(a)}}clear(){this.chatContainer.innerHTML=""}createMessageElement(e){const s=document.createElement("div");let a="bg-gray-300 dark:bg-gray-700",c="self-start";e.sender==="User"?(a="bg-blue-500 text-white",c="self-end"):e.sender==="Error"&&(a="bg-red-500 text-white"),s.className=`p-3 rounded-lg ${a} w-full ${c} message`,s.dataset.id=e.id;const r=document.createElement("div");if(r.className="message-content",r.innerHTML=marked.parse(e.content,{breaks:!0}),s.appendChild(r),e.files&&e.files.length>0){const o=document.createElement("div");o.className="flex flex-wrap gap-2 mt-2",e.files.forEach(i=>{const f=document.createElement("div");f.className="flex items-center bg-gray-200 dark:bg-gray-600 rounded-lg p-2";const w=document.createElement("span");w.className="mr-2 text-gray-800 dark:text-gray-200",w.style.wordBreak="break-all",w.textContent=i.name,f.appendChild(w);const b=document.createElement("button");b.textContent="⬇️",b.className="download-file-btn",b.addEventListener("click",()=>{const E=document.createElement("a");E.href=i.data,E.download=i.name,E.click()}),f.appendChild(b),o.appendChild(f)}),s.appendChild(o)}return s.querySelectorAll("pre").forEach(o=>{const i=o.querySelector("code"),f=i.className.split("-")[1]||"",w=document.createElement("div");w.className="code-block-container";const b=document.createElement("div");b.className="code-block-header";const E=document.createElement("span");E.textContent=f,b.appendChild(E);const x=document.createElement("button");x.textContent="Copy",x.className="copy-code-btn",b.appendChild(x),w.appendChild(b),w.appendChild(o.cloneNode(!0)),o.replaceWith(w),hljs.highlightElement(w.querySelector("pre code")),x.addEventListener("click",I=>{I.stopPropagation();const N=i.innerText;navigator.clipboard.writeText(N).then(()=>{x.textContent="Copied!",setTimeout(()=>{x.textContent="Copy"},2e3)},()=>{alert("Failed to copy code.")})})}),e.sender!=="Error"&&s.addEventListener("click",o=>{const i=new CustomEvent("message-selected",{detail:{messageElement:s,x:o.clientX,y:o.clientY}});this.chatContainer.dispatchEvent(i)}),s}}window.ChatView=ue;document.addEventListener("DOMContentLoaded",()=>{const y=document.getElementById("cycle-model-btn"),e=document.getElementById("model-nickname"),s=document.getElementById("settings-btn"),a=document.getElementById("chat-container"),c=document.getElementById("resize-handle"),r=document.getElementById("message-input"),o=document.getElementById("send-btn"),i=document.getElementById("settings-modal"),f=document.getElementById("llm-configs-container"),w=document.getElementById("add-model-btn"),b=document.getElementById("save-settings-btn"),E=document.getElementById("close-settings-btn"),x=document.getElementById("clear-chat-btn"),I=document.getElementById("import-settings-btn"),N=document.getElementById("export-settings-btn");document.getElementById("copy-chat-btn");const u=document.querySelector("footer"),m=document.getElementById("attach-file-btn"),p=document.getElementById("attached-files-container"),h=document.getElementById("cancel-edit-btn");let M=[],A=null,$=null,U=u.offsetHeight;const v=new window.ChatView(a);a.addEventListener("message-selected",t=>{const{messageElement:d,x:n,y:l}=t.detail;$&&T(),$=d,ee(d,n,l)}),document.addEventListener("click",t=>{if(!document.querySelector(".message-controls"))return;const n=t.target.closest("[data-id]"),l=t.target.closest(".message-controls");!n&&!l&&T()});const ee=async(t,d,n)=>{const l=document.createElement("div");l.className="message-controls absolute bg-white dark:bg-gray-800 rounded-lg shadow-lg p-2 flex space-x-2";const g=parseInt(t.dataset.id),k=document.createElement("button");k.textContent="✏️",k.addEventListener("click",async()=>{const P=await window.chatAPI.getMessage(g);r.value=P.content,M=P.files||[],A=g,O(),h.classList.remove("hidden"),o.textContent="💾",T(),r.focus()});const C=document.createElement("button");C.textContent="🗑️",C.addEventListener("click",async()=>{confirm("Are you sure you want to delete this message?")&&(await window.chatAPI.removeMessage(g),v.removeMessage(g)),T()});const _=document.createElement("button");_.textContent="📋",_.addEventListener("click",()=>{navigator.clipboard.writeText(t.textContent).then(()=>{alert("Message copied to clipboard!")},()=>{alert("Failed to copy message.")}),T()});const B=document.createElement("button");B.textContent="🔄️",B.addEventListener("click",async()=>{const P=await window.chatAPI.getMessages(),z=P.findIndex(q=>q.id===g),te=P[z];let L;te.sender==="User"?L=P.slice(0,z+1):L=P.slice(0,z),window.chatAPI.messages=L,await window.db.clearMessages();for(const q of L)await window.db.addMessage(q);const ne=a.scrollTop;v.renderMessages(L),a.scrollTop=ne;const Q=L[L.length-1];if(Q&&Q.sender==="User"){T(),o.disabled=!0;const q={sender:"Assistant",content:"...",id:-1};v.appendMessage(q);const Z=await window.chatAPI.sendMessage(L);v.removeMessage(-1),Z&&v.appendMessage(Z),o.disabled=!1,r.focus()}}),l.appendChild(k),l.appendChild(C),l.appendChild(_),l.appendChild(B),l.style.visibility="hidden",document.body.appendChild(l);const K=l.getBoundingClientRect(),W=window.innerWidth,X=window.innerHeight;let j=d,Y=n;d+K.width>W&&(j=W-K.width-5),n+K.height>X&&(Y=X-K.height-5),j<0&&(j=5),Y<0&&(Y=5),l.style.left=`${j}px`,l.style.top=`${Y}px`,l.style.visibility="visible"},T=()=>{const t=document.querySelector(".message-controls");t&&t.remove(),$&&($=null)},R=()=>{f.innerHTML="",window.chatAPI.getModels().forEach((t,d)=>{const n=document.createElement("div");n.className="mb-4 p-4 border border-black rounded-lg dark:border-black",n.innerHTML=`
                <div class="flex justify-between items-center mb-2">
                    <h3 class="text-lg font-semibold">${t.nickname}</h3>
                    <button type="button" class="remove-model-btn text-xl" data-index="${d}">➖</button>
                </div>
                <input type="text" value="${t.endpoint}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Endpoint URL">
                <div class="model-name-container" style="display: ${t.apiSchema==="google"?"none":"block"}">
                    <input type="text" value="${t.model}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Model Name">
                </div>
                <input type="text" value="${t.nickname}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Nickname">
                <textarea class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="System Prompt">${t.system_prompt}</textarea>
                <input type="password" value="${t.apiKey||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="API Key">
                <input type="number" step="0.1" value="${t.temperature}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Temperature">
                <input type="number" value="${t.maxOutputTokens||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Max Output Tokens">
                <input type="number" value="${t.thinkingBudget??""}" class="w-full p-2 mt-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Thinking Budget (tokens)">
                <select class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600 api-schema" placeholder="API Schema">
                    <option value="openai" ${t.apiSchema==="openai"?"selected":""}>OpenAI</option>
                    <option value="google" ${t.apiSchema==="google"?"selected":""}>Google</option>
                </select>
                <div class="google-search-container" style="display: ${t.apiSchema==="google"?"block":"none"}">
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="google-search-checkbox-${d}" class="mr-2" ${t.useGoogleSearch?"checked":""}>
                        <label for="google-search-checkbox-${d}">Enable Google Search</label>
                    </div>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="prepend-system-prompt-checkbox-${d}" class="mr-2" ${t.prependSystemPrompt?"checked":""}>
                        <label for="prepend-system-prompt-checkbox-${d}">Prepend System Prompt</label>
                    </div>
                </div>
            `,f.appendChild(n)}),document.querySelectorAll(".remove-model-btn").forEach(t=>{t.addEventListener("click",d=>{const n=d.target.dataset.index;window.chatAPI.removeModel(n),R()})}),document.querySelectorAll(".api-schema").forEach(t=>{t.addEventListener("change",d=>{const n=d.target.closest(".mb-4"),l=n.querySelector(".google-search-container"),g=n.querySelector(".model-name-container");d.target.value==="google"?(l.style.display="block",g.style.display="none"):(l.style.display="none",g.style.display="block")})})};y.addEventListener("click",()=>{const t=window.chatAPI.cycleModel();e.textContent=t.nickname}),s.addEventListener("click",()=>{R(),i.classList.remove("hidden")}),E.addEventListener("click",()=>{i.classList.add("hidden")}),w.addEventListener("click",()=>{window.chatAPI.addModel({endpoint:"",apiKey:"",model:"",nickname:"New Model",temperature:.7,system_prompt:"You are a helpful assistant.",apiSchema:"openai",maxOutputTokens:2048}),R()}),b.addEventListener("click",t=>{t.preventDefault();const d=Array.from(f.children).map(n=>({endpoint:n.querySelector('input[placeholder="Endpoint URL"]').value,model:n.querySelector(".api-schema").value==="google"?"":n.querySelector('input[placeholder="Model Name"]').value,nickname:n.querySelector('input[placeholder="Nickname"]').value,apiKey:n.querySelector('input[placeholder="API Key"]').value,temperature:parseFloat(n.querySelector('input[placeholder="Temperature"]').value),maxOutputTokens:parseInt(n.querySelector('input[placeholder="Max Output Tokens"]').value,10),system_prompt:n.querySelector("textarea").value,apiSchema:n.querySelector(".api-schema").value,useGoogleSearch:n.querySelector(".api-schema").value==="google"?n.querySelector('input[id^="google-search-checkbox-"]').checked:!1,prependSystemPrompt:n.querySelector(".api-schema").value==="google"?n.querySelector('input[id^="prepend-system-prompt-checkbox-"]').checked:!1,thinkingBudget:n.querySelector(".api-schema").value==="google"?parseInt(n.querySelector('input[placeholder="Thinking Budget (tokens)"]').value,10):null}));window.chatAPI.saveModels(d),i.classList.add("hidden"),e.textContent=window.chatAPI.getCurrentModel().nickname});const O=()=>{p.innerHTML="",M.forEach((g,k)=>{const C=document.createElement("div");C.className="attached-file-item";const _=document.createElement("span");_.textContent=g.name,C.appendChild(_);const B=document.createElement("button");B.className="remove-file-btn",B.textContent="❌",B.addEventListener("click",()=>{M.splice(k,1),O()}),C.appendChild(B),p.appendChild(C)});const l=u.querySelector(".flex-grow").scrollHeight-r.offsetHeight+90;u.offsetHeight<l&&(u.style.height=`${l}px`)};m.addEventListener("click",()=>{const t=document.createElement("input");t.type="file",t.multiple=!0,t.addEventListener("change",d=>{const n=d.target.files;for(let l=0;l<n.length;l++){const g=n[l],k=new FileReader;k.onload=C=>{M.push({name:g.name,type:g.type,data:C.target.result}),O()},k.readAsDataURL(g)}}),t.click()}),o.addEventListener("click",async()=>{const t=r.value.trim();if(t||M.length>0)if(A!==null){const d=await window.chatAPI.updateMessage(A,t,M);v.editMessage(d),A=null,h.classList.add("hidden"),o.textContent="▶️",r.value="",M=[],O()}else{const d={sender:"User",content:t,files:M},n=await window.chatAPI.addMessage(d);v.appendMessage(n),r.value="",M=[],O(),o.disabled=!0;const l={sender:"Assistant",content:"...",id:-1};v.appendMessage(l);const g=await window.chatAPI.sendMessage(await window.chatAPI.getMessages());v.removeMessage(-1),g&&v.appendMessage(g),o.disabled=!1}}),h.addEventListener("click",()=>{r.value="",M=[],A=null,O(),h.classList.add("hidden"),o.textContent="▶️"}),r.addEventListener("keydown",t=>{t.ctrlKey&&t.key==="Enter"&&(t.preventDefault(),o.click())});let F=!1;const V=t=>{F=!0,document.body.style.userSelect="none",document.body.style.cursor="row-resize"},J=t=>{if(F){const d=t.clientY||t.touches&&t.touches[0].clientY;if(d===void 0)return;let n=window.innerHeight-d;const l=U+p.offsetHeight,g=500;n<l&&(n=l),n>g&&(n=g),u.style.height=`${n}px`}},D=()=>{F=!1,document.body.style.userSelect="",document.body.style.cursor=""};c.addEventListener("mousedown",V),document.addEventListener("mousemove",J),document.addEventListener("mouseup",D),c.addEventListener("touchstart",V,{passive:!0}),document.addEventListener("touchmove",J),document.addEventListener("touchend",D),x.addEventListener("click",async()=>{confirm("Are you sure you want to clear the chat?")&&(await window.chatAPI.clearMessages(),v.clear())}),N.addEventListener("click",()=>{const t=window.chatAPI.getModels(),d="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(t,null,2)),n=document.createElement("a");n.setAttribute("href",d),n.setAttribute("download","gemini-chat-settings.json"),document.body.appendChild(n),n.click(),n.remove()}),I.addEventListener("click",()=>{const t=document.createElement("input");t.type="file",t.accept=".json",t.onchange=d=>{const n=d.target.files[0],l=new FileReader;l.onload=g=>{try{const k=g.target.result,C=JSON.parse(k);window.chatAPI.saveModels(C),R(),e.textContent=window.chatAPI.getCurrentModel().nickname,alert("Settings imported successfully!")}catch(k){alert("Error importing settings: "+k.message)}},l.readAsText(n)},t.click()}),(async()=>{const t=window.chatAPI.getCurrentModel();t?e.textContent=t.nickname:(e.textContent="No Model",o.disabled=!0);const d=await window.chatAPI.getMessages();v.renderMessages(d)})()});
