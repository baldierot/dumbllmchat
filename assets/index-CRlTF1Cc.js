(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))u(r);new MutationObserver(r=>{for(const c of r)if(c.type==="childList")for(const g of c.addedNodes)g.tagName==="LINK"&&g.rel==="modulepreload"&&u(g)}).observe(document,{childList:!0,subtree:!0});function k(r){const c={};return r.integrity&&(c.integrity=r.integrity),r.referrerPolicy&&(c.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?c.credentials="include":r.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function u(r){if(r.ep)return;r.ep=!0;const c=k(r);fetch(r.href,c)}})();class X{constructor(){this.models=this.getModels(),this.messages=this.getMessages(),this.currentModelIndex=this.getCurrentModelIndex()}getModels(){const n=localStorage.getItem("llm_models");return n?JSON.parse(n):[{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent",model:"",nickname:"flash-lite",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",model:"",nickname:"flash",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",model:"",nickname:"pro",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,prependSystemPrompt:!1,thinkingBudget:32768}]}saveModels(n){this.models=n,localStorage.setItem("llm_models",JSON.stringify(n))}addModel(n){this.models.push(n),this.saveModels(this.models)}updateModel(n,k){this.models[n]=k,this.saveModels(this.models)}removeModel(n){this.models.splice(n,1),this.saveModels(this.models)}getCurrentModel(){return this.models[this.currentModelIndex]}cycleModel(){return this.currentModelIndex=(this.currentModelIndex+1)%this.models.length,this.saveCurrentModelIndex(),this.getCurrentModel()}getCurrentModelIndex(){const n=localStorage.getItem("current_model_index");return n?parseInt(n,10):0}saveCurrentModelIndex(){localStorage.setItem("current_model_index",this.currentModelIndex)}getMessages(){const n=localStorage.getItem("chat_messages");return n?JSON.parse(n):[]}saveMessages(){localStorage.setItem("chat_messages",JSON.stringify(this.messages))}addMessage(n){this.messages.push(n),this.saveMessages()}updateMessage(n,k){this.messages[n].content=k,this.saveMessages()}removeMessage(n){this.messages.splice(n,1),this.saveMessages()}clearMessages(){this.messages=[],this.saveMessages()}async sendMessage(n){const k=this.getCurrentModel(),{endpoint:u,apiKey:r,model:c,temperature:g,system_prompt:M,apiSchema:x,useGoogleSearch:Y,maxOutputTokens:G,prependSystemPrompt:$,thinkingBudget:q}=k;let E,H=u;if(x==="google"){const l=n.map(a=>({role:a.sender==="User"?"user":"model",parts:[{text:a.content}]}));if($){const a=l[l.length-1];a.role==="user"&&(a.parts[0].text=`${M}

${a.parts[0].text}`)}E={contents:l,generationConfig:{temperature:g,topK:1,topP:1,maxOutputTokens:G||2048,stopSequences:[]},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_NONE"}]},$||(E.systemInstruction={role:"user",parts:[{text:M}]}),Y&&(E.tools=[{google_search:{}}]),q&&(E.generationConfig.thinkingConfig={thinkingBudget:q}),H=u}else{let l;if($){l=n.map(d=>({role:d.sender.toLowerCase(),content:d.content}));const a=l[l.length-1];a.role==="user"&&(a.content=`${M}

${a.content}`)}else l=[{role:"system",content:M},...n.map(a=>({role:a.sender.toLowerCase(),content:a.content}))];E={model:c,messages:l,temperature:g}}try{const l=await fetch(H,{method:"POST",headers:{"Content-Type":"application/json",...x==="openai"&&{Authorization:`Bearer ${r}`},...x==="google"&&{"x-goog-api-key":r}},body:JSON.stringify(E)});if(!l.ok){const i=await l.json().catch(()=>({}));throw new Error(`API Error: ${l.status} ${l.statusText} - ${i.error?.message||"Unknown error"}`)}const a=await l.json();let d;if(x==="google"){const i=a.candidates[0].content;i&&i.parts?d={content:i.parts.map(w=>w.text).join("")}:d={content:"[The model sent an empty response.]"}}else d=a.choices[0]?.message;if(d?.content){const i={sender:"Assistant",content:d.content};return this.addMessage(i),i}else if(d?.tool_calls){const i=d.tool_calls[0],R=i.function.name,w=i.function.arguments,B={sender:"Assistant",content:`The model wants to call the '${R}' tool with the following arguments: ${w}. However, tool execution is not yet implemented.`};return this.addMessage(B),B}else throw new Error("API Error: Invalid response format.")}catch(l){console.error("API call failed:",l);const a={sender:"Error",content:`An error occurred: ${l.message}`};return this.addMessage(a),a}}}window.chatAPI=new X;document.addEventListener("DOMContentLoaded",()=>{const K=document.getElementById("cycle-model-btn"),n=document.getElementById("model-nickname"),k=document.getElementById("settings-btn"),u=document.getElementById("chat-container"),r=document.getElementById("resize-handle"),c=document.getElementById("message-input"),g=document.getElementById("send-btn"),M=document.getElementById("settings-modal"),x=document.getElementById("llm-configs-container"),Y=document.getElementById("add-model-btn"),G=document.getElementById("save-settings-btn"),$=document.getElementById("close-settings-btn"),q=document.getElementById("clear-chat-btn"),E=document.getElementById("import-settings-btn"),H=document.getElementById("export-settings-btn");document.getElementById("copy-chat-btn");const l=document.querySelector("footer");let a=null;document.addEventListener("click",e=>{if(!document.querySelector(".message-controls"))return;const t=e.target.closest("[data-index]"),o=e.target.closest(".message-controls");!t&&!o&&w()});const d=()=>{u.innerHTML="",window.chatAPI.getMessages().forEach((e,s)=>{const t=i(e,s);u.appendChild(t)})},i=(e,s)=>{const t=document.createElement("div");let o="bg-gray-300 dark:bg-gray-700",p="self-start";e.sender==="User"?(o="bg-blue-500 text-white",p="self-end"):e.sender==="Error"&&(o="bg-red-500 text-white"),t.className=`p-3 rounded-lg ${o} w-full ${p} message`;const f=document.createElement("div");return f.className="message-content",f.innerHTML=marked.parse(e.content,{breaks:!0}),t.appendChild(f),t.dataset.index=s,t.querySelectorAll("pre").forEach(h=>{const N=h.querySelector("code"),T=N.className.split("-")[1]||"",C=document.createElement("div");C.className="code-block-container";const A=document.createElement("div");A.className="code-block-header";const L=document.createElement("span");L.textContent=T,A.appendChild(L);const b=document.createElement("button");b.textContent="Copy",b.className="copy-code-btn",A.appendChild(b),C.appendChild(A),C.appendChild(h.cloneNode(!0)),h.replaceWith(C),hljs.highlightElement(C.querySelector("pre code")),b.addEventListener("click",y=>{y.stopPropagation();const S=N.innerText;navigator.clipboard.writeText(S).then(()=>{b.textContent="Copied!",setTimeout(()=>{b.textContent="Copy"},2e3)},()=>{alert("Failed to copy code.")})})}),e.sender!=="Error"&&t.addEventListener("click",h=>{a&&w(),a=t,R(t,h.clientX,h.clientY)}),t},R=(e,s,t)=>{const o=document.createElement("div");o.className="message-controls absolute bg-white dark:bg-gray-800 rounded-lg shadow-lg p-2 flex space-x-2";const p=document.createElement("button");p.textContent="✏️",p.addEventListener("click",()=>{const y=e.dataset.index,S=e.querySelector(".message-content"),U=window.chatAPI.getMessages()[y].content,m=document.createElement("div");m.className="w-full";const I=document.createElement("textarea");I.className=`w-full p-2 border rounded-lg dark:bg-gray-700 dark:border-gray-600 resize-y text-black dark:text-white min-h-[${e.offsetHeight}px]`,I.value=U;const O=document.createElement("button");O.textContent="Save",O.className="bg-blue-500 text-white px-4 py-2 rounded-lg mt-2";const P=document.createElement("button");P.textContent="Cancel",P.className="bg-gray-500 text-white px-4 py-2 rounded-lg mt-2 ml-2",m.appendChild(I),m.appendChild(O),m.appendChild(P),S.innerHTML="",S.appendChild(m),I.focus(),m.addEventListener("keydown",v=>{v.ctrlKey&&v.key==="Enter"&&(v.preventDefault(),O.click())}),O.addEventListener("click",()=>{const v=I.value;if(v){window.chatAPI.updateMessage(y,v);const W=i(window.chatAPI.getMessages()[y],y);e.replaceWith(W)}}),P.addEventListener("click",()=>{const v=i(window.chatAPI.getMessages()[y],y);e.replaceWith(v)}),w()});const f=document.createElement("button");f.textContent="🗑️",f.addEventListener("click",()=>{confirm("Are you sure you want to delete this message?")&&(window.chatAPI.removeMessage(e.dataset.index),d()),w()});const h=document.createElement("button");h.textContent="📋",h.addEventListener("click",()=>{navigator.clipboard.writeText(e.textContent).then(()=>{alert("Message copied to clipboard!")},()=>{alert("Failed to copy message.")}),w()});const N=document.createElement("button");N.textContent="🔄️",N.addEventListener("click",async()=>{const y=parseInt(e.dataset.index),S=window.chatAPI.getMessages(),U=S[y];let m;U.sender==="User"?m=S.slice(0,y+1):m=S.slice(0,y),window.chatAPI.messages=m,window.chatAPI.saveMessages(),d();const I=m[m.length-1];if(I&&I.sender==="User"){w(),g.disabled=!0;const P=i({sender:"Assistant",content:"..."},-1);u.appendChild(P),u.scrollTop=u.scrollHeight;const v=await window.chatAPI.sendMessage(m);u.removeChild(P),v&&d(),g.disabled=!1,c.focus()}}),o.appendChild(p),o.appendChild(f),o.appendChild(h),o.appendChild(N),o.style.visibility="hidden",document.body.appendChild(o);const T=o.getBoundingClientRect(),C=window.innerWidth,A=window.innerHeight;let L=s,b=t;s+T.width>C&&(L=C-T.width-5),t+T.height>A&&(b=A-T.height-5),L<0&&(L=5),b<0&&(b=5),o.style.left=`${L}px`,o.style.top=`${b}px`,o.style.visibility="visible"},w=()=>{const e=document.querySelector(".message-controls");e&&e.remove(),a&&(a=null)},_=()=>{x.innerHTML="",window.chatAPI.getModels().forEach((e,s)=>{const t=document.createElement("div");t.className="mb-4 p-4 border border-black rounded-lg dark:border-black",t.innerHTML=`
                <div class="flex justify-between items-center mb-2">
                    <h3 class="text-lg font-semibold">${e.nickname}</h3>
                    <button type="button" class="remove-model-btn text-xl" data-index="${s}">➖</button>
                </div>
                <input type="text" value="${e.endpoint}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Endpoint URL">
                <div class="model-name-container" style="display: ${e.apiSchema==="google"?"none":"block"}">
                    <input type="text" value="${e.model}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Model Name">
                </div>
                <input type="text" value="${e.nickname}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Nickname">
                <textarea class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="System Prompt">${e.system_prompt}</textarea>
                <input type="password" value="${e.apiKey||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="API Key">
                <input type="number" step="0.1" value="${e.temperature}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Temperature">
                <input type="number" value="${e.maxOutputTokens||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Max Output Tokens">
                <input type="number" value="${e.thinkingBudget??""}" class="w-full p-2 mt-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Thinking Budget (tokens)">
                <select class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600 api-schema" placeholder="API Schema">
                    <option value="openai" ${e.apiSchema==="openai"?"selected":""}>OpenAI</option>
                    <option value="google" ${e.apiSchema==="google"?"selected":""}>Google</option>
                </select>
                <div class="google-search-container" style="display: ${e.apiSchema==="google"?"block":"none"}">
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="google-search-checkbox-${s}" class="mr-2" ${e.useGoogleSearch?"checked":""}>
                        <label for="google-search-checkbox-${s}">Enable Google Search</label>
                    </div>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="prepend-system-prompt-checkbox-${s}" class="mr-2" ${e.prependSystemPrompt?"checked":""}>
                        <label for="prepend-system-prompt-checkbox-${s}">Prepend System Prompt</label>
                    </div>
                </div>
            `,x.appendChild(t)}),document.querySelectorAll(".remove-model-btn").forEach(e=>{e.addEventListener("click",s=>{const t=s.target.dataset.index;window.chatAPI.removeModel(t),_()})}),document.querySelectorAll(".api-schema").forEach(e=>{e.addEventListener("change",s=>{const t=s.target.closest(".mb-4"),o=t.querySelector(".google-search-container"),p=t.querySelector(".model-name-container");s.target.value==="google"?(o.style.display="block",p.style.display="none"):(o.style.display="none",p.style.display="block")})})};K.addEventListener("click",()=>{const e=window.chatAPI.cycleModel();n.textContent=e.nickname}),k.addEventListener("click",()=>{_(),M.classList.remove("hidden")}),$.addEventListener("click",()=>{M.classList.add("hidden")}),Y.addEventListener("click",()=>{window.chatAPI.addModel({endpoint:"",apiKey:"",model:"",nickname:"New Model",temperature:.7,system_prompt:"You are a helpful assistant.",apiSchema:"openai",maxOutputTokens:2048}),_()}),G.addEventListener("click",e=>{e.preventDefault();const s=Array.from(x.children).map(t=>({endpoint:t.querySelector('input[placeholder="Endpoint URL"]').value,model:t.querySelector(".api-schema").value==="google"?"":t.querySelector('input[placeholder="Model Name"]').value,nickname:t.querySelector('input[placeholder="Nickname"]').value,apiKey:t.querySelector('input[placeholder="API Key"]').value,temperature:parseFloat(t.querySelector('input[placeholder="Temperature"]').value),maxOutputTokens:parseInt(t.querySelector('input[placeholder="Max Output Tokens"]').value,10),system_prompt:t.querySelector("textarea").value,apiSchema:t.querySelector(".api-schema").value,useGoogleSearch:t.querySelector(".api-schema").value==="google"?t.querySelector('input[id^="google-search-checkbox-"]').checked:!1,prependSystemPrompt:t.querySelector(".api-schema").value==="google"?t.querySelector('input[id^="prepend-system-prompt-checkbox-"]').checked:!1,thinkingBudget:t.querySelector(".api-schema").value==="google"?parseInt(t.querySelector('input[placeholder="Thinking Budget (tokens)"]').value,10):null}));window.chatAPI.saveModels(s),M.classList.add("hidden"),n.textContent=window.chatAPI.getCurrentModel().nickname}),g.addEventListener("click",async()=>{const e=c.value.trim();if(e){c.value="",g.disabled=!0;const s={sender:"User",content:e};window.chatAPI.addMessage(s),d();const o=i({sender:"Assistant",content:"..."},-1);u.appendChild(o),o.scrollIntoView({behavior:"smooth"});const p=await window.chatAPI.sendMessage(window.chatAPI.getMessages());u.removeChild(o),p&&d(),g.disabled=!1}}),c.addEventListener("keydown",e=>{e.ctrlKey&&e.key==="Enter"&&(e.preventDefault(),g.click())});let B=!1;const j=e=>{B=!0,document.body.style.userSelect="none",document.body.style.cursor="row-resize"},z=e=>{if(B){const s=e.clientY||e.touches&&e.touches[0].clientY;if(s===void 0)return;const t=window.innerHeight-s;t>=140&&t<=500&&(l.style.height=`${t}px`)}},J=()=>{B=!1,document.body.style.userSelect="",document.body.style.cursor=""};r.addEventListener("mousedown",j),document.addEventListener("mousemove",z),document.addEventListener("mouseup",J),r.addEventListener("touchstart",j,{passive:!0}),document.addEventListener("touchmove",z),document.addEventListener("touchend",J),q.addEventListener("click",()=>{confirm("Are you sure you want to clear the chat?")&&(window.chatAPI.clearMessages(),d())}),H.addEventListener("click",()=>{const e=window.chatAPI.getModels(),s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,2)),t=document.createElement("a");t.setAttribute("href",s),t.setAttribute("download","gemini-chat-settings.json"),document.body.appendChild(t),t.click(),t.remove()}),E.addEventListener("click",()=>{const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=s=>{const t=s.target.files[0],o=new FileReader;o.onload=p=>{try{const f=p.target.result,h=JSON.parse(f);window.chatAPI.saveModels(h),_(),n.textContent=window.chatAPI.getCurrentModel().nickname,alert("Settings imported successfully!")}catch(f){alert("Error importing settings: "+f.message)}},o.readAsText(t)},e.click()});const F=window.chatAPI.getCurrentModel();F?n.textContent=F.nickname:(n.textContent="No Model",g.disabled=!0),d()});
