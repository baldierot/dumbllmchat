(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const l of o)if(l.type==="childList")for(const a of l.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&r(a)}).observe(document,{childList:!0,subtree:!0});function s(o){const l={};return o.integrity&&(l.integrity=o.integrity),o.referrerPolicy&&(l.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?l.credentials="include":o.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function r(o){if(o.ep)return;o.ep=!0;const l=s(o);fetch(o.href,l)}})();const he="dumbllmchat_db",pe=2,E="messages",B="conversations";let X;function L(){return new Promise((g,e)=>{if(X)return g(X);const s=indexedDB.open(he,pe);s.onerror=r=>{e("Error opening IndexedDB")},s.onsuccess=r=>{X=r.target.result,g(X)},s.onupgradeneeded=r=>{const o=r.target.result;if(o.objectStoreNames.contains(B)||o.createObjectStore(B,{keyPath:"id",autoIncrement:!0}),!o.objectStoreNames.contains(E))o.createObjectStore(E,{keyPath:"id",autoIncrement:!0}).createIndex("conversationId","conversationId",{unique:!1});else{const a=r.target.transaction.objectStore(E);a.indexNames.contains("conversationId")||a.createIndex("conversationId","conversationId",{unique:!1})}}})}async function we(){const g=await L();return new Promise((e,s)=>{const l=g.transaction([B],"readonly").objectStore(B).getAll();l.onerror=a=>{s("Error getting conversations from IndexedDB")},l.onsuccess=a=>{e(a.target.result)}})}async function ve(g){const e=await L();return new Promise((s,r)=>{const a=e.transaction([B],"readwrite").objectStore(B).add(g);a.onerror=d=>{r("Error adding conversation to IndexedDB")},a.onsuccess=d=>{s(d.target.result)}})}async function ye(g){const e=await L();return new Promise((s,r)=>{const a=e.transaction([B],"readwrite").objectStore(B).put(g);a.onerror=d=>{r("Error updating conversation in IndexedDB")},a.onsuccess=d=>{s(d.target.result)}})}async function fe(g){const e=await L();return new Promise((s,r)=>{const o=e.transaction([B,E],"readwrite"),l=o.objectStore(B),a=o.objectStore(E);l.delete(g);const h=a.index("conversationId").openCursor(IDBKeyRange.only(g));h.onsuccess=p=>{const f=p.target.result;f&&(f.delete(),f.continue())},o.oncomplete=()=>{s()},o.onerror=p=>{r("Error deleting conversation from IndexedDB")}})}async function Ce(g){const e=await L();return new Promise((s,r)=>{const d=e.transaction([E],"readonly").objectStore(E).index("conversationId").getAll(g);d.onerror=h=>{r("Error getting messages from IndexedDB")},d.onsuccess=h=>{s(h.target.result)}})}async function be(g){const e=await L();return new Promise((s,r)=>{const a=e.transaction([E],"readwrite").objectStore(E).add(g);a.onerror=d=>{r("Error adding message to IndexedDB")},a.onsuccess=d=>{s(d.target.result)}})}async function Ie(g){const e=await L();return new Promise((s,r)=>{const a=e.transaction([E],"readwrite").objectStore(E).put(g);a.onerror=d=>{r("Error updating message in IndexedDB")},a.onsuccess=d=>{s(d.target.result)}})}async function Ee(g){const e=await L();return new Promise((s,r)=>{const a=e.transaction([E],"readwrite").objectStore(E).delete(g);a.onerror=d=>{r("Error removing message from IndexedDB")},a.onsuccess=d=>{s()}})}async function Me(g){const e=await L();return new Promise((s,r)=>{const o=e.transaction([E],"readwrite"),d=o.objectStore(E).index("conversationId").openCursor(IDBKeyRange.only(g));d.onsuccess=h=>{const p=h.target.result;p&&(p.delete(),p.continue())},o.oncomplete=()=>{s()},o.onerror=h=>{r("Error clearing messages from IndexedDB")}})}window.db={getConversations:we,addConversation:ve,updateConversation:ye,deleteConversation:fe,getMessages:Ce,addMessage:be,updateMessage:Ie,removeMessage:Ee,clearMessages:Me};class xe{constructor(){this.models=this.getModels(),this.messages=[],this.conversations=[],this.currentConversationId=null,this.currentModelIndex=this.getCurrentModelIndex(),this.init()}async init(){this.conversations=await window.db.getConversations(),this.currentConversationId=this.getCurrentConversationId(),!this.currentConversationId&&this.conversations.length>0&&(this.currentConversationId=this.conversations[0].id,this.saveCurrentConversationId()),this.currentConversationId&&(this.messages=await this.getMessages())}getCurrentConversationId(){return parseInt(localStorage.getItem("current_conversation_id"))}saveCurrentConversationId(){localStorage.setItem("current_conversation_id",this.currentConversationId)}async getConversations(){return this.conversations=await window.db.getConversations(),this.conversations}async addConversation(e){const s=await window.db.addConversation(e),r={...e,id:s};return this.conversations.push(r),r}async updateConversation(e){await window.db.updateConversation(e);const s=this.conversations.findIndex(r=>r.id===e.id);s!==-1&&(this.conversations[s]=e)}async deleteConversation(e){await window.db.deleteConversation(e),this.conversations=this.conversations.filter(s=>s.id!==e),this.currentConversationId===e&&(this.conversations.length>0?this.currentConversationId=this.conversations[0].id:this.currentConversationId=null,this.saveCurrentConversationId())}async switchConversation(e){this.currentConversationId=e,this.saveCurrentConversationId(),this.messages=await this.getMessages()}getModels(){const e=localStorage.getItem("llm_models");return e?JSON.parse(e):[{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent",model:"",nickname:"flash-lite",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,useUrlContext:!1,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",model:"",nickname:"flash",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,useUrlContext:!1,prependSystemPrompt:!1,thinkingBudget:24576},{endpoint:"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",model:"",nickname:"pro",apiKey:"",temperature:.7,maxOutputTokens:null,system_prompt:"You are a helpful assistant.",apiSchema:"google",useGoogleSearch:!0,useUrlContext:!1,prependSystemPrompt:!1,thinkingBudget:32768}]}saveModels(e){this.models=e,localStorage.setItem("llm_models",JSON.stringify(e))}addModel(e){this.models.push(e),this.saveModels(this.models)}updateModel(e,s){this.models[e]=s,this.saveModels(this.models)}removeModel(e){this.models.splice(e,1),this.saveModels(this.models)}getCurrentModel(){return this.models[this.currentModelIndex]}cycleModel(){return this.currentModelIndex=(this.currentModelIndex+1)%this.models.length,this.saveCurrentModelIndex(),this.getCurrentModel()}getCurrentModelIndex(){const e=localStorage.getItem("current_model_index");return e?parseInt(e,10):0}saveCurrentModelIndex(){localStorage.setItem("current_model_index",this.currentModelIndex)}async getMessages(){return this.currentConversationId?(this.messages=await window.db.getMessages(this.currentConversationId),this.messages):[]}async getMessage(e){return this.messages.find(s=>s.id===e)}async addMessage(e){if(!this.currentConversationId){const l=await this.addConversation({name:"New Conversation",timestamp:Date.now()});this.currentConversationId=l.id,this.saveCurrentConversationId()}const s={...e,conversationId:this.currentConversationId},r=await window.db.addMessage(s),o={...s,id:r};return this.messages.push(o),o}async updateMessage(e,s,r){const o=await this.getMessage(e);return o.content=s,r&&(o.files=r),await window.db.updateMessage(o),o}async removeMessage(e){await window.db.removeMessage(e),this.messages=this.messages.filter(s=>s.id!==e)}async clearMessages(){this.currentConversationId&&(await window.db.clearMessages(this.currentConversationId),this.messages=[])}async sendMessage(e){const s=this.getCurrentModel(),{endpoint:r,apiKey:o,model:l,temperature:a,system_prompt:d,apiSchema:h,useGoogleSearch:p,useUrlContext:f,maxOutputTokens:S,prependSystemPrompt:k,thinkingBudget:P}=s;let M,G=r;if(h==="google"){const w=e.map(m=>{const C=[{text:m.content}];return m.files&&m.files.forEach(T=>{C.push({inline_data:{mime_type:T.type,data:T.data.split(",")[1]}})}),{role:m.sender==="User"?"user":"model",parts:C}});if(k){const m=w[w.length-1];m.role==="user"&&(m.parts[0].text=`${d}

${m.parts[0].text}`)}M={contents:w,generationConfig:{temperature:a,topK:1,topP:1,maxOutputTokens:S||2048,stopSequences:[]},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_NONE"}]},k||(M.systemInstruction={role:"user",parts:[{text:d}]});const v=[];p&&v.push({google_search:{}}),f&&v.push({url_context:{}}),v.length>0&&(M.tools=v),P&&(M.generationConfig.thinkingConfig={thinkingBudget:P}),G=r}else{let w;if(k){w=e.map(m=>({role:m.sender.toLowerCase(),content:m.content}));const v=w[w.length-1];v.role==="user"&&(v.content=`${d}

${v.content}`)}else w=[{role:"system",content:d},...e.map(v=>{const m=[{type:"text",text:v.content}];return v.files&&v.files.forEach(C=>{m.push({type:"image_url",image_url:{url:C.data}})}),{role:v.sender.toLowerCase(),content:m}})];M={model:l,messages:w,temperature:a}}try{const w=await fetch(G,{method:"POST",headers:{"Content-Type":"application/json",...h==="openai"&&{Authorization:`Bearer ${o}`},...h==="google"&&{"x-goog-api-key":o}},body:JSON.stringify(M)});if(!w.ok){const C=await w.json().catch(()=>({}));throw new Error(`API Error: ${w.status} ${w.statusText} - ${C.error?.message||"Unknown error"}`)}const v=await w.json();let m;if(h==="google"){const C=v.candidates[0].content;C&&C.parts?m={content:C.parts.map(j=>j.text).join("")}:m={content:"[The model sent an empty response.]"}}else m=v.choices[0]?.message;if(m?.content){const C={sender:"Assistant",content:m.content};return await this.addMessage(C)}else if(m?.tool_calls){const C=m.tool_calls[0],T=C.function.name,j=C.function.arguments,q={sender:"Assistant",content:`The model wants to call the '${T}' tool with the following arguments: ${j}. However, tool execution is not yet implemented.`};return await this.addMessage(q)}else throw new Error("API Error: Invalid response format.")}catch(w){console.error("API call failed:",w);const v={sender:"Error",content:`An error occurred: ${w.message}`};return await this.addMessage(v)}}}window.chatAPI=new xe;class ke{constructor(e){this.chatContainer=e}appendMessage(e){const s=this.chatContainer.scrollHeight-this.chatContainer.clientHeight<=this.chatContainer.scrollTop+1,r=this.createMessageElement(e);this.chatContainer.appendChild(r),s&&r.scrollIntoView({behavior:"smooth"})}renderMessages(e){this.clear(),e.forEach(s=>{const r=this.createMessageElement(s);this.chatContainer.appendChild(r)})}removeMessage(e){const s=this.chatContainer.querySelector(`[data-id='${e}']`);s&&s.remove()}editMessage(e){const s=this.chatContainer.querySelector(`[data-id='${e.id}']`);if(s){const r=this.createMessageElement(e);s.replaceWith(r)}}clear(){this.chatContainer.innerHTML=""}createMessageElement(e){const s=document.createElement("div");let r="bg-gray-300 dark:bg-gray-700",o="self-start";e.sender==="User"?(r="bg-blue-500 text-white",o="self-end"):e.sender==="Error"&&(r="bg-red-500 text-white"),s.className=`p-3 rounded-lg ${r} w-full ${o} message`,s.dataset.id=e.id;const l=document.createElement("div");if(l.className="message-content",l.innerHTML=marked.parse(e.content,{breaks:!0}),s.appendChild(l),e.files&&e.files.length>0){const a=document.createElement("div");a.className="flex flex-wrap gap-2 mt-2",e.files.forEach(d=>{const h=document.createElement("div");h.className="flex items-center bg-gray-200 dark:bg-gray-600 rounded-lg p-2";const p=document.createElement("span");p.className="mr-2 text-gray-800 dark:text-gray-200",p.style.wordBreak="break-all",p.textContent=d.name,h.appendChild(p);const f=document.createElement("button");f.textContent="⬇️",f.className="download-file-btn",f.addEventListener("click",()=>{const S=document.createElement("a");S.href=d.data,S.download=d.name,S.click()}),h.appendChild(f),a.appendChild(h)}),s.appendChild(a)}return s.querySelectorAll("pre").forEach(a=>{const d=a.querySelector("code"),h=d.className.split("-")[1]||"",p=document.createElement("div");p.className="code-block-container";const f=document.createElement("div");f.className="code-block-header";const S=document.createElement("span");S.textContent=h,f.appendChild(S);const k=document.createElement("button");k.textContent="Copy",k.className="copy-code-btn",f.appendChild(k),p.appendChild(f),p.appendChild(a.cloneNode(!0)),a.replaceWith(p),hljs.highlightElement(p.querySelector("pre code")),k.addEventListener("click",P=>{P.stopPropagation();const M=d.innerText;navigator.clipboard.writeText(M).then(()=>{k.textContent="Copied!",setTimeout(()=>{k.textContent="Copy"},2e3)},()=>{alert("Failed to copy code.")})})}),e.sender!=="Error"&&s.addEventListener("click",a=>{const d=new CustomEvent("message-selected",{detail:{messageElement:s,x:a.clientX,y:a.clientY}});this.chatContainer.dispatchEvent(d)}),s}}window.ChatView=ke;document.addEventListener("DOMContentLoaded",()=>{const g=document.getElementById("cycle-model-btn"),e=document.getElementById("model-nickname"),s=document.getElementById("settings-btn"),r=document.getElementById("history-btn"),o=document.getElementById("chat-container"),l=document.getElementById("resize-handle"),a=document.getElementById("message-input"),d=document.getElementById("send-btn"),h=document.getElementById("settings-modal"),p=document.getElementById("llm-configs-container"),f=document.getElementById("add-model-btn"),S=document.getElementById("save-settings-btn"),k=document.getElementById("close-settings-btn"),P=document.getElementById("history-modal"),M=document.getElementById("conversations-container"),G=document.getElementById("add-conversation-btn"),w=document.getElementById("rename-conversation-btn"),v=document.getElementById("delete-conversation-btn"),m=document.getElementById("load-conversation-btn"),C=document.getElementById("close-history-btn"),T=document.getElementById("clear-chat-btn"),j=document.getElementById("import-settings-btn"),te=document.getElementById("export-settings-btn");document.getElementById("copy-chat-btn");const q=document.querySelector("footer"),de=document.getElementById("attach-file-btn"),Q=document.getElementById("attached-files-container"),Y=document.getElementById("cancel-edit-btn");let A=[],U=null,D=null,x=null,le=q.offsetHeight;const I=new window.ChatView(o);o.addEventListener("message-selected",t=>{const{messageElement:i,x:n,y:c}=t.detail;D&&$(),D=i,ue(i,n,c)}),document.addEventListener("click",t=>{if(!document.querySelector(".message-controls"))return;const n=t.target.closest("[data-id]"),c=t.target.closest(".message-controls");!n&&!c&&$()});const ue=async(t,i,n)=>{const c=document.createElement("div");c.className="message-controls absolute bg-white dark:bg-gray-800 rounded-lg shadow-lg p-2 flex space-x-2";const u=parseInt(t.dataset.id),b=document.createElement("button");b.textContent="✏️",b.addEventListener("click",async()=>{const _=await window.chatAPI.getMessage(u);a.value=_.content,A=_.files||[],U=u,H(),Y.classList.remove("hidden"),d.textContent="💾",$(),a.focus()});const y=document.createElement("button");y.textContent="🗑️",y.addEventListener("click",async()=>{confirm("Are you sure you want to delete this message?")&&(await window.chatAPI.removeMessage(u),I.removeMessage(u)),$()});const R=document.createElement("button");R.textContent="📋",R.addEventListener("click",()=>{navigator.clipboard.writeText(t.textContent).then(()=>{alert("Message copied to clipboard!")},()=>{alert("Failed to copy message.")}),$()});const N=document.createElement("button");N.textContent="🔄️",N.addEventListener("click",async()=>{const _=await window.chatAPI.getMessages(),ee=_.findIndex(K=>K.id===u),me=_[ee];let O;me.sender==="User"?O=_.slice(0,ee+1):O=_.slice(0,ee),await window.chatAPI.clearMessages();for(const K of O)await window.chatAPI.addMessage(K);const ge=o.scrollTop;I.renderMessages(O),o.scrollTop=ge;const ie=O[O.length-1];if(ie&&ie.sender==="User"){$(),d.disabled=!0;const K={sender:"Assistant",content:"...",id:-1};I.appendMessage(K);const ce=await window.chatAPI.sendMessage(O);I.removeMessage(-1),ce&&I.appendMessage(ce),d.disabled=!1,a.focus()}}),c.appendChild(b),c.appendChild(y),c.appendChild(R),c.appendChild(N),c.style.visibility="hidden",document.body.appendChild(c);const z=c.getBoundingClientRect(),ae=window.innerWidth,re=window.innerHeight;let J=i,W=n;i+z.width>ae&&(J=ae-z.width-5),n+z.height>re&&(W=re-z.height-5),J<0&&(J=5),W<0&&(W=5),c.style.left=`${J}px`,c.style.top=`${W}px`,c.style.visibility="visible"},$=()=>{const t=document.querySelector(".message-controls");t&&t.remove(),D&&(D=null)},F=async()=>{const t=await window.chatAPI.getConversations();t.reverse(),M.innerHTML="",x=null,w.disabled=!0,v.disabled=!0,m.disabled=!0;for(const n of t){const c=document.createElement("li");c.className="p-2 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700",c.dataset.id=n.id;const u=document.createElement("span");u.className="truncate";let b=n.name;if(!b){const y=await window.db.getMessages(n.id);y.length>0?b=y[0].content.split(`
`)[0]:b="New Conversation"}u.textContent=b,c.appendChild(u),c.addEventListener("click",()=>{if(x!==null){const y=M.querySelector(`[data-id='${x}']`);y&&y.classList.remove("selected")}c.classList.add("selected"),x=n.id,w.disabled=!1,v.disabled=!1,m.disabled=!1,c.scrollIntoView({block:"nearest"})}),M.appendChild(c)}const i=M.querySelector(`[data-id='${window.chatAPI.currentConversationId}']`);i&&(i.classList.add("selected"),x=window.chatAPI.currentConversationId,w.disabled=!1,v.disabled=!1,m.disabled=!1,setTimeout(()=>{i.scrollIntoView({block:"nearest"})},0))};r.addEventListener("click",async()=>{await F(),P.classList.remove("hidden")}),C.addEventListener("click",()=>{P.classList.add("hidden")}),G.addEventListener("click",async()=>{const t=await window.chatAPI.addConversation({name:"New Conversation",timestamp:Date.now()});await window.chatAPI.switchConversation(t.id),I.clear(),await F()}),m.addEventListener("click",async()=>{if(x!==null){await window.chatAPI.switchConversation(x);const t=await window.chatAPI.getMessages();I.renderMessages(t),P.classList.add("hidden")}}),w.addEventListener("click",async()=>{if(x!==null){const t=window.chatAPI.conversations.find(n=>n.id===x),i=prompt("Enter new conversation name:",t.name);if(i&&i.trim()!==""){t.name=i,await window.chatAPI.updateConversation(t);const n=x;await F();const c=M.querySelector(`[data-id='${n}']`);c&&setTimeout(()=>{c.click(),c.scrollIntoView({block:"nearest"})},0)}}}),v.addEventListener("click",async()=>{if(x!==null&&confirm("Are you sure you want to delete this conversation?")){let t=await window.chatAPI.getConversations();t.reverse();const i=t.findIndex(u=>u.id===x);await window.chatAPI.deleteConversation(x);let n=await window.chatAPI.getConversations();if(n.reverse(),n.length>0){let u=i;u>=n.length&&(u=n.length-1),await window.chatAPI.switchConversation(n[u].id)}else await window.chatAPI.addConversation({name:"New Conversation",timestamp:Date.now()});const c=await window.chatAPI.getMessages();I.renderMessages(c),await F()}});const V=()=>{p.innerHTML="",window.chatAPI.getModels().forEach((t,i)=>{const n=document.createElement("div");n.className="mb-4 p-4 border border-black rounded-lg dark:border-black",n.innerHTML=`
                <div class="flex justify-between items-center mb-2">
                    <h3 class="text-lg font-semibold">${t.nickname}</h3>
                    <button type="button" class="remove-model-btn text-xl" data-index="${i}">➖</button>
                </div>
                <input type="text" value="${t.endpoint}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Endpoint URL">
                <div class="model-name-container" style="display: ${t.apiSchema==="google"?"none":"block"}">
                    <input type="text" value="${t.model}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Model Name">
                </div>
                <input type="text" value="${t.nickname}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Nickname">
                <textarea class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="System Prompt">${t.system_prompt}</textarea>
                <input type="password" value="${t.apiKey||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="API Key">
                <input type="number" step="0.1" value="${t.temperature}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Temperature">
                <input type="number" value="${t.maxOutputTokens||""}" class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Max Output Tokens">
                <input type="number" value="${t.thinkingBudget??""}" class="w-full p-2 mt-2 border rounded dark:bg-gray-700 dark:border-gray-600" placeholder="Thinking Budget (tokens)">
                <select class="w-full p-2 mb-2 border rounded dark:bg-gray-700 dark:border-gray-600 api-schema" placeholder="API Schema">
                    <option value="openai" ${t.apiSchema==="openai"?"selected":""}>OpenAI</option>
                    <option value="google" ${t.apiSchema==="google"?"selected":""}>Google</option>
                </select>
                <div class="google-search-container" style="display: ${t.apiSchema==="google"?"block":"none"}">
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="google-search-checkbox-${i}" class="mr-2" ${t.useGoogleSearch?"checked":""}>
                        <label for="google-search-checkbox-${i}">Enable Google Search</label>
                    </div>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="prepend-system-prompt-checkbox-${i}" class="mr-2" ${t.prependSystemPrompt?"checked":""}>
                        <label for="prepend-system-prompt-checkbox-${i}">Prepend System Prompt</label>
                    </div>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="url-context-checkbox-${i}" class="mr-2" ${t.useUrlContext?"checked":""}>
                        <label for="url-context-checkbox-${i}">Enable URL Context</label>
                    </div>
                </div>
            `,p.appendChild(n)}),document.querySelectorAll(".remove-model-btn").forEach(t=>{t.addEventListener("click",i=>{const n=i.target.dataset.index;window.chatAPI.removeModel(n),V()})}),document.querySelectorAll(".api-schema").forEach(t=>{t.addEventListener("change",i=>{const n=i.target.closest(".mb-4"),c=n.querySelector(".google-search-container"),u=n.querySelector(".model-name-container");i.target.value==="google"?(c.style.display="block",u.style.display="none"):(c.style.display="none",u.style.display="block")})})};g.addEventListener("click",()=>{const t=window.chatAPI.cycleModel();e.textContent=t.nickname}),s.addEventListener("click",()=>{V(),h.classList.remove("hidden")}),k.addEventListener("click",()=>{h.classList.add("hidden")}),f.addEventListener("click",()=>{window.chatAPI.addModel({endpoint:"",apiKey:"",model:"",nickname:"New Model",temperature:.7,system_prompt:"You are a helpful assistant.",apiSchema:"openai",maxOutputTokens:2048}),V()}),S.addEventListener("click",t=>{t.preventDefault();const i=Array.from(p.children).map(n=>({endpoint:n.querySelector('input[placeholder="Endpoint URL"]').value,model:n.querySelector(".api-schema").value==="google"?"":n.querySelector('input[placeholder="Model Name"]').value,nickname:n.querySelector('input[placeholder="Nickname"]').value,apiKey:n.querySelector('input[placeholder="API Key"]').value,temperature:parseFloat(n.querySelector('input[placeholder="Temperature"]').value),maxOutputTokens:parseInt(n.querySelector('input[placeholder="Max Output Tokens"]').value,10),system_prompt:n.querySelector("textarea").value,apiSchema:n.querySelector(".api-schema").value,useGoogleSearch:n.querySelector(".api-schema").value==="google"?n.querySelector('input[id^="google-search-checkbox-"]').checked:!1,useUrlContext:n.querySelector(".api-schema").value==="google"?n.querySelector('input[id^="url-context-checkbox-"]').checked:!1,prependSystemPrompt:n.querySelector(".api-schema").value==="google"?n.querySelector('input[id^="prepend-system-prompt-checkbox-"]').checked:!1,thinkingBudget:n.querySelector(".api-schema").value==="google"?parseInt(n.querySelector('input[placeholder="Thinking Budget (tokens)"]').value,10):null}));window.chatAPI.saveModels(i),h.classList.add("hidden"),e.textContent=window.chatAPI.getCurrentModel().nickname});const H=()=>{Q.innerHTML="",A.forEach((u,b)=>{const y=document.createElement("div");y.className="attached-file-item";const R=document.createElement("span");R.textContent=u.name,y.appendChild(R);const N=document.createElement("button");N.className="remove-file-btn",N.textContent="❌",N.addEventListener("click",()=>{A.splice(b,1),H()}),y.appendChild(N),Q.appendChild(y)});const c=q.querySelector(".flex-grow").scrollHeight-a.offsetHeight+90;q.offsetHeight<c&&(q.style.height=`${c}px`)};de.addEventListener("click",()=>{const t=document.createElement("input");t.type="file",t.multiple=!0,t.addEventListener("change",i=>{const n=i.target.files;for(let c=0;c<n.length;c++){const u=n[c],b=new FileReader;b.onload=y=>{A.push({name:u.name,type:u.type,data:y.target.result}),H()},b.readAsDataURL(u)}}),t.click()}),d.addEventListener("click",async()=>{const t=a.value.trim();if(t||A.length>0)if(U!==null){const i=await window.chatAPI.updateMessage(U,t,A);I.editMessage(i),U=null,Y.classList.add("hidden"),d.textContent="▶️",a.value="",A=[],H()}else{const i={sender:"User",content:t,files:A},n=await window.chatAPI.addMessage(i);I.appendMessage(n),a.value="",A=[],H(),d.disabled=!0;const c={sender:"Assistant",content:"...",id:-1};I.appendMessage(c);const u=await window.chatAPI.sendMessage(await window.chatAPI.getMessages());I.removeMessage(-1),u&&I.appendMessage(u),d.disabled=!1}}),Y.addEventListener("click",()=>{a.value="",A=[],U=null,H(),Y.classList.add("hidden"),d.textContent="▶️"}),a.addEventListener("keydown",t=>{t.ctrlKey&&t.key==="Enter"&&(t.preventDefault(),d.click())});let Z=!1;const ne=t=>{Z=!0,document.body.style.userSelect="none",document.body.style.cursor="row-resize"},se=t=>{if(Z){const i=t.clientY||t.touches&&t.touches[0].clientY;if(i===void 0)return;let n=window.innerHeight-i;const c=le+Q.offsetHeight,u=500;n<c&&(n=c),n>u&&(n=u),q.style.height=`${n}px`}},oe=()=>{Z=!1,document.body.style.userSelect="",document.body.style.cursor=""};l.addEventListener("mousedown",ne),document.addEventListener("mousemove",se),document.addEventListener("mouseup",oe),l.addEventListener("touchstart",ne,{passive:!0}),document.addEventListener("touchmove",se),document.addEventListener("touchend",oe),T.addEventListener("click",async()=>{confirm("Are you sure you want to clear the chat?")&&(await window.chatAPI.clearMessages(),I.clear())}),te.addEventListener("click",()=>{const t=window.chatAPI.getModels(),i="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(t,null,2)),n=document.createElement("a");n.setAttribute("href",i),n.setAttribute("download","gemini-chat-settings.json"),document.body.appendChild(n),n.click(),n.remove()}),j.addEventListener("click",()=>{const t=document.createElement("input");t.type="file",t.accept=".json",t.onchange=i=>{const n=i.target.files[0],c=new FileReader;c.onload=u=>{try{const b=u.target.result,y=JSON.parse(b);window.chatAPI.saveModels(y),V(),e.textContent=window.chatAPI.getCurrentModel().nickname,alert("Settings imported successfully!")}catch(b){alert("Error importing settings: "+b.message)}},c.readAsText(n)},t.click()}),(async()=>{await window.chatAPI.init();const t=window.chatAPI.getCurrentModel();t?e.textContent=t.nickname:(e.textContent="No Model",d.disabled=!0);const i=await window.chatAPI.getMessages();I.renderMessages(i)})()});
